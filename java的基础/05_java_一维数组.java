// 一维数组: 一维数组实质上是一组相同类型数据的线性集合，是数组中最简单的一种数组。
// - 1. 声明
// - 2. 创建
// - 3. 初始化
// - 4. 元素的引用
// - 5. 长度
// - 6. 数组的应用

//-------------------------------------------------------------------------

// 1. 声明：为了在程序中使用一个数组，必须声明一个引用该数组的变量，
//         并指明整个变量可以引用的数组类型。声明一维数组的语法格式为：
//         数据类型数组名[];
//    或者：数据类型[]数组名;
// 声明数组就是要告诉计算机该数组中数据的类型是什么。例如：
// int[] score; -> 存储学生的成绩，类型为整型
// double[] price;  -> 存储商品的价格，类型为浮点型
// String[] name;  -> 存储商品名称，类型为字符串型
// 在声明数组时不需要规定数组的长度，例如：
// int score[10];      //这是错误的

// -------------------------------------------------------------------------

// 2. 创建
// 声明了数组，只是得到了一个存放数组的变量，并没有为数组元素分配内存空间，不能使用。
// 因此要为数组分配内存空间，这样数组的每一个元素才有一个空间进行存储。
// 简单地说，分配空间就是要告诉计算机在内存中为它分配几个连续的位置来存储数据。
// 在 Java 中可以使用 new 关键字来给数组分配空间。分配空间的语法格式如下：
// 数组名=new 数据类型[数组长度]; 
// 例如：
// score=new int[10];
// price=new double[30];
// name=new String[20];

// 当然也可以在声明数组时就给它分配空间，语法格式如下：
// 数据类型[]数组名=new 数据类型[数组长度];
// 例如，声明并分配一个长度为 5 的 整型int 类型数组 arr，代码如下：
// int arr = new int[5];

// 注意：一旦声明了数组的大小，就不能再修改。这里的数组长度也是必需的，不能少。

// -------------------------------------------------------------------------

// 3. 初始化
// 数组可以进行初始化操作，在初始化数组的同时，可以指定数组的大小，
// 也可以分别初始化数组中的每一个元素。在 Java 语言中，初始化数组有以下 3 种方式。

// (1). 使用 new 指定数组大小后进行初始化, 语法如下：
// type[] 数组名 = new int[size];
// 创建数组之后，元素的值并不确定，需要为每一个数组的元素进行赋值，其下标从 0 开始。
// 例如： 创建包含 5 个元素的 int 类型的数组，然后分别将元素的值设置为 1、2、3、5 和 8。代码如下：
// int[] number = new int[5];
// number[0]=1;
// number[1]=2;
// number[2]=3;
// number[3]=5;
// number[4]=8;
// 注意：使用 new 创建数组之后，它还只是一个引用，直接将值赋给引用，初始化过程才算结束。

// (2): 使用 new 指定数组元素的值, 语法如下：
// type[] 数组名 = new type[]{值 1,值 2,值 3,值 4,• • •,值 n};
// 例如： int[] number = new int[]{1, 2, 3, 5, 8};

// (3). 直接指定数组元素的值
// 在上述两种方式的语法中，type 可以省略，如果已经声明数组变量，那么直接使用这两种方式进行初始化。
// 如果不想使用上述两种方式，那么可以不使用 new 直接指定数组元素的值。语法如下：
// type[] 数组名 = {值 1,值 2,值 3,值 值 n};
// 例如：int[] number = {1, 2, 3, 5, 8};

// -------------------------------------------------------------------------

// 获取单个元素： 语法如下：array[index];
// 例如： int[] number = {1, 2, 3, 5, 8};
// System.out.print（number[0]);  // 1

// 获取全部元素——使用循环语句
// 下面利用 for 循环语句遍历 number 数组中的全部元素，并将元素的值输出。代码如下：
// int[] number = {1, 2, 3, 5, 8};
// for (int i = 0; i < number.length; i++){
//     System.out.println(number[i]);
// }

// 除了使用 for 语句，还可以使用 foreach 遍历数组中的元素，并将元素的值输出。
// for(int val:number){
//     System.out.print("元素的值依次是："+val+"\t");
// }

// -------------------------------------------------------------------------

// 一维数组总结  

//注意的问题：
// 1. 数组是引用数据类型
// 2. 创建数组时，会开辟连续的内存空间
// 3. 数组长度使用length属性获取
// 4. 数组元素的下标从0开始
// 5. 数组下标越界问题

// 参考资料： http://c.biancheng.net/view/913.html

